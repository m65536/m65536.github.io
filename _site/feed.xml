<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-23T13:44:21+08:00</updated><id>http://localhost:4000/</id><title type="html">MoXingwang</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Mysql实时数据变更事件捕获kafka confluent之debezium</title><link href="http://localhost:4000/2018/08/23/MySql%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8F%98%E6%9B%B4%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7kafka-confluent%E4%B9%8Bdebezium.html" rel="alternate" type="text/html" title="Mysql实时数据变更事件捕获kafka confluent之debezium" /><published>2018-08-23T00:00:00+08:00</published><updated>2018-08-23T00:00:00+08:00</updated><id>http://localhost:4000/2018/08/23/MySql%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8F%98%E6%9B%B4%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7kafka%20confluent%E4%B9%8Bdebezium</id><content type="html" xml:base="http://localhost:4000/2018/08/23/MySql%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8F%98%E6%9B%B4%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7kafka-confluent%E4%B9%8Bdebezium.html">&lt;blockquote&gt;
  &lt;p&gt;official &lt;a href=&quot;https://debezium.io/&quot;&gt;Debezium&lt;/a&gt;，demo &lt;a href=&quot;https://github.com/moxingwang/kafka&quot;&gt;https://github.com/moxingwang/kafka&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文主要讲在kafka confluent的基础上如何使用debezium插件获取mysql binlog数据事件完成实时数据流，debezium是以插件的方式配合confluent使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你的后端应用数据存储使用的MySQL，项目中如果有这样的业务场景你会怎么做呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分库分表数据拆分和迁移&lt;/li&gt;
  &lt;li&gt;历史数据同步分析&lt;/li&gt;
  &lt;li&gt;异步处理&lt;/li&gt;
  &lt;li&gt;多个应用之间数据同步和共享&lt;/li&gt;
  &lt;li&gt;建立elasticsearch搜索&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于最简单最直接的做法就是修改原有应用的代码，在数据发生改变的同时通知下游系统，或者数据改变发送MQ，下游系统消费消息。这样的设计虽然看似简单，但是实现真的很麻烦，数据库表多、业务复杂，各种业务代码里面到处是增删改，这样的设计后期难以维护，也难以保证数据一致性和可靠性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/moxingwang/resource/blob/master/image/debezium_old_artic.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;试想有没有可靠的替代方案，无需代码侵入，当数据库发生改变的时候，这些改变都是一个一个的data change事件发布到相应的中间件，下游系统订阅消息，这个设计就不得不提大名鼎鼎的kafka confluent了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/moxingwang/resource/blob/master/image/debezium_kafka_connect_1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kafka connect是Confluent公司(当时开发出Apache Kafka的核心团队成员出来创立的新公司)开发的confluent platform的核心功能.大家都知道现在数据的ETL过程经常会选择kafka作为消息中间件应用在离线和实时的使用场景中,而kafka的数据上游和下游一直没有一个无缝衔接的pipeline来实现统一,比如会选择flume或者logstash采集数据到kafka,然后kafka又通过其他方式pull或者push数据到目标存储.而kafka connect旨在围绕kafka构建一个可伸缩的，可靠的数据流通道，通过kafka connect可以快速实现大量数据进出kafka从而和其他源数据源或者目标数据源进行交互构造一个低延迟的数据pipeline。具体官网文档&lt;a href=&quot;https://www.confluent.io/&quot;&gt;https://www.confluent.io/&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然kafka confluent提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;JDBC Connector&lt;/code&gt;使用JDBC的方式去获取数据源，这种方式kafka connector追踪每个表中检索到的组继续记录，可以在下一次迭代或者崩溃的情况下寻找到正确的位置，这里存在几种实现模式，具体可以参考官网说明&lt;a href=&quot;https://docs.confluent.io/current/connect/connect-jdbc/docs/source_connector.html?_ga=2.234527774.129940869.1534840941-1720937463.1533732285&quot;&gt;JDBC Source Connector&lt;/a&gt;。但是我这里推荐使用debezium，这种方式基于MySQL binlog的特性，首先你需要了解什么是debezium。&lt;/p&gt;

&lt;p&gt;debezium是一个开源的分布式CDC（变更数据捕获）系统，支持对接各种数据源，将上游已持久化的数据变更捕获后写入消息队列，其特性查看官网&lt;a href=&quot;https://debezium.io/docs/faq/&quot;&gt;How it works&lt;/a&gt;，类似的CDC系统还有&lt;code class=&quot;highlighter-rouge&quot;&gt;Canal&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;debezium使用&quot;&gt;debezium使用&lt;/h2&gt;
&lt;h4 id=&quot;部署kafka-confluent&quot;&gt;部署kafka confluent&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;如何部署kafka confluent这里不再描述，可以参考我的&lt;a href=&quot;https://juejin.im/post/5b75483a518825613c02b14b&quot;&gt;Kafka Confluent安装部署&lt;/a&gt;这篇文章。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;安装debezium插件&quot;&gt;安装debezium插件&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;下载
    &lt;blockquote&gt;
      &lt;p&gt;官网地址&lt;a href=&quot;https://debezium.io/&quot;&gt;debezium&lt;/a&gt;,下载连接&lt;a href=&quot;https://repo1.maven.org/maven2/io/debezium/debezium-connector-mysql/0.8.1.Final/debezium-connector-mysql-0.8.1.Final-plugin.tar.gz&quot;&gt;MySQL Connector plugin archive&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;安装插件Debezium
    &lt;blockquote&gt;
      &lt;p&gt;把解压后的debezium复制到conlfuent安装目录share/java文件中，如&lt;/p&gt;
      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Users/mo/runtime/confluent-4.1.2/share/java/debezium-connector-mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;再次启动confluent即可&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;debezium使用-1&quot;&gt;debezium使用&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;以下操作都在本地部署测试。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用debezium之前必须先开启mysql得binlog，这里不再叙述，具体可以参考我的&lt;a href=&quot;https://juejin.im/post/5b1de8335188257d367e6697&quot;&gt;Linux安装Java、Maven、Mysql、RabbitMQ&lt;/a&gt;这篇；接下来构建一个kafka connect来使用debezium插件，confluent提供了restful api可快速创建kafka connect。&lt;/p&gt;

&lt;h4 id=&quot;创建kafka-connect连接&quot;&gt;创建kafka connect连接&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -i -X POST -H &quot;Accept:application/json&quot; -H  &quot;Content-Type:application/json&quot; http://localhost:8083/connectors/  -d '
{
  &quot;name&quot;: &quot;mysql-connector&quot;,
  &quot;config&quot;: {
    &quot;connector.class&quot;: &quot;io.debezium.connector.mysql.MySqlConnector&quot;,
    &quot;database.hostname&quot;: &quot;localhost&quot;,
    &quot;database.port&quot;: &quot;3306&quot;,
    &quot;database.user&quot;: &quot;root&quot;,
    &quot;database.password&quot;: &quot;debezium&quot;,
    &quot;database.server.id&quot;: &quot;1&quot;,
    &quot;database.server.name&quot;: &quot;dbserver1&quot;,
    &quot;database.history.kafka.bootstrap.servers&quot;: &quot;localhost:9092&quot;,
    &quot;database.history.kafka.topic&quot;: &quot;dbhistory.inventory&quot;,
    &quot;include.schema.changes&quot;: &quot;true&quot;
  }
}
'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;注意：&lt;/code&gt;这里的脚本其实是一行，我为了方便查看展开了json。复制可用的脚本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -i -X POST -H &quot;Accept:application/json&quot; -H  &quot;Content-Type:application/json&quot; http://localhost:8083/connectors/  -d '{&quot;name&quot;:&quot;mysql-connector&quot;,&quot;config&quot;: {          &quot;connector.class&quot;: &quot;io.debezium.connector.mysql.MySqlConnector&quot;,         &quot;database.hostname&quot;: &quot;localhost&quot;,       &quot;database.port&quot;: &quot;3306&quot;,          &quot;database.user&quot;: &quot;root&quot;,      &quot;database.password&quot;: &quot;debezium&quot;,         &quot;database.server.id&quot;: &quot;1&quot;,     &quot;database.server.name&quot;: &quot;dbserver1&quot;,     &quot;database.history.kafka.bootstrap.servers&quot;: &quot;localhost:9092&quot;,     &quot;database.history.kafka.topic&quot;: &quot;dbhistory.inventory&quot; ,     &quot;include.schema.changes&quot;: &quot;true&quot; }}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如下图，说明连接创建成功。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/moxingwang/kafka/blob/master/resource/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180820194418.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;curl -H &quot;Accept:application/json&quot; localhost:8083/&lt;/code&gt;查看已创建成功的connect，如图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/moxingwang/kafka/blob/master/resource/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180820194425.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;验证&quot;&gt;验证&lt;/h4&gt;
&lt;p&gt;debezium会读取MySQL binlog产生数据改变事件，将事件发送到kafka队列，最简单的验证办法就是监听这些队列（这些队列按照表名区分）具体参考代码请查看&lt;a href=&quot;https://github.com/moxingwang/kafka&quot;&gt;https://github.com/moxingwang/kafka&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这里我们观察数据库的&lt;code class=&quot;highlighter-rouge&quot;&gt;inventory.customers&lt;/code&gt;表，监听&lt;code class=&quot;highlighter-rouge&quot;&gt;dbserver1.inventory.customers&lt;/code&gt;队列。&lt;/p&gt;

&lt;p&gt;首先将customers表id为1004的email字段内容update如图。
&lt;img src=&quot;https://github.com/moxingwang/kafka/blob/master/resource/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180820195810.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/moxingwang/kafka/blob/master/resource/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180820195815.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时，应用消费者会立马收到一条消费消息。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-08-20 19:57:20.742  INFO 3447 --- [      t34-0-C-1] com.mo.debezium.SpringBootKafkaConsumer  : ConsumerRecord(
	topic = dbserver1.inventory.customers, partition = 0, offset = 4, CreateTime = 1534766239965, serialized key size = 7, serialized value size = 151, 
	headers = RecordHeaders(headers = [], isReadOnly = false), 
	key = {&quot;id&quot;: 1004}, 
	value = {&quot;before&quot;: {&quot;id&quot;: 1004, &quot;first_name&quot;: &quot;Anne&quot;, &quot;last_name&quot;: &quot;Kretchmar&quot;, &quot;email&quot;: &quot;annek@noanswer.org&quot;},
 	&quot;after&quot;: {&quot;id&quot;: 1004, &quot;first_name&quot;: &quot;Anne&quot;, &quot;last_name&quot;: &quot;Kretchmar&quot;, &quot;email&quot;: &quot;test@noanswer.org&quot;},
  	&quot;source&quot;: {&quot;name&quot;: &quot;dbserver1&quot;, &quot;server_id&quot;: 223344, &quot;ts_sec&quot;: 1534766241, &quot;gtid&quot;: null, &quot;file&quot;: &quot;mysql-bin.000003&quot;, &quot;pos&quot;: 364, &quot;row&quot;: 0, &quot;snapshot&quot;: null, &quot;thread&quot;: 7, &quot;db&quot;: &quot;inventory&quot;, &quot;table&quot;: &quot;customers&quot;},
   	&quot;op&quot;: &quot;u&quot;, &quot;ts_ms&quot;: 1534766239592}
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;到此我们的debezium方案已介绍完毕，使用起来也是相对比较加单的。&lt;/p&gt;

&lt;h2 id=&quot;常见问题&quot;&gt;常见问题&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;序列化
如果你使用debezium把数据同步到了kafka，自己去消费这些topic，在消费的时候需要使用avro来反序列化。具体原因是由于debezium采用avro的方式来序列化，具体参考&lt;a href=&quot;https://debezium.io/blog/2016/09/19/Serializing-Debezium-events-with-Avro/&quot;&gt;Serializing Debezium events with Avro&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;启动失败
    &lt;blockquote&gt;
      &lt;p&gt;如故你现在的是最新版本，请查看的你解压后的文件夹名称是否带’\‘，去掉后就能够正常启动。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;{“error_code”:409,”message”:”Cannot complete request because of a conflicting operation (e.g. worker rebalance)”}
&lt;a href=&quot;https://yuzhouwan.com/posts/26002/&quot;&gt;Apache Kafka 分布式消息队列框架&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;[Connection to node -1 could not be established. Broker may not be available
&lt;a href=&quot;https://www.jianshu.com/p/475d02c76ba7&quot;&gt;Connection to node -1 could not be established. Broker may not be available.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;参考&quot;&gt;参考&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rmoff.net/2018/03/24/streaming-data-from-mysql-into-kafka-with-kafka-connect-and-debezium/&quot;&gt;Streaming Data from MySQL into Kafka with Kafka Connect and Debezium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/yjh314/article/details/51669238&quot;&gt;修改linux系统的时间EDT为CST&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.programcreek.com/java-api-examples/index.php?api=io.confluent.kafka.serializers.KafkaAvroDecoder&quot;&gt;Java Code Examples for io.confluent.kafka.serializers.KafkaAvroDecoder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/u013256816/article/details/78657995&quot;&gt;Kafka消息序列化和反序列化（下）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.confluent.io/current/installation/clients.html&quot;&gt;Version 5.0.0 Docs » Getting Started » Installation » clients &amp;gt; Maven repository for JARs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/cd6f413d35b0&quot;&gt;Kafka 中使用 Avro 序列化组件(三)：Confluent Schema Registry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dbaplus.cn/news-73-2164-1.html&quot;&gt;实时数据平台设计：技术选型与应用场景适配模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/cssdongl/article/details/77750482&quot;&gt;Kafka connect快速构建数据ETL通道&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;后期持续跟新。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;关键词&quot;&gt;关键词&lt;/h6&gt;
&lt;p&gt;confluent, kafka, kafka connect, debezium, schemas-registry&lt;/p&gt;</content><author><name></name></author><summary type="html">official Debezium，demo https://github.com/moxingwang/kafka</summary></entry><entry><title type="html">Kafka confluent安装部署</title><link href="http://localhost:4000/2018/08/23/Kafka-Confluent%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2.html" rel="alternate" type="text/html" title="Kafka confluent安装部署" /><published>2018-08-23T00:00:00+08:00</published><updated>2018-08-23T00:00:00+08:00</updated><id>http://localhost:4000/2018/08/23/Kafka%20Confluent%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2</id><content type="html" xml:base="http://localhost:4000/2018/08/23/Kafka-Confluent%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2.html">&lt;blockquote&gt;
  &lt;p&gt;official &lt;a href=&quot;https://docs.confluent.io/current/quickstart/index.html&quot;&gt;Confluent Platform Quick Start&lt;/a&gt; ; &lt;a href=&quot;https://docs.confluent.io/current/installation/installing_cp/zip-tar.html&quot;&gt;Manual Install using ZIP and TAR Archives&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;confluent的安装部署相对比较简单，confluent为我们提供了Confluent Platform,我们即可以快速启动整个confluent平台，也可以单独启动想要的组件。接下来我们详细介绍如何操作。&lt;/p&gt;

&lt;h2 id=&quot;confluent-platform下载&quot;&gt;confluent platform下载&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;地址&lt;a href=&quot;https://www.confluent.io/download/&quot;&gt;https://www.confluent.io/download/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解压&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -zxvf confluent-5.0.0-2.11.tar.gz&lt;/code&gt;后可以看到文件列表。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  -rw-r--r--@  1 mo  staff   871  7 29 08:19 README
  drwxr-xr-x@ 68 mo  staff  2176  7 29 07:52 bin 		//Driver scripts for starting and stopping services
  drwxr-xr-x@ 23 mo  staff   736  7 29 07:52 etc 		//Configuration files
  drwxr-xr-x@  3 mo  staff    96  7 29 07:38 lib 		//Systemd services
  drwxr-xr-x   2 mo  staff    64  8  4 21:36 logs 	//Log files
  drwxr-xr-x@  7 mo  staff   224  7 29 07:52 share 	//Jars and licenses
  drwxr-xr-x@  9 mo  staff   288  7 29 08:19 src 		//Source files that require a platform-dependent build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先看看如何快速启动confluent platform全家桶&lt;code class=&quot;highlighter-rouge&quot;&gt;ZooKeeper&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;Kafka&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;Schema Registry&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;Control Center&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;Kafka Connect&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;Kafka REST Proxy&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;KSQL&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;快速启动platform&quot;&gt;快速启动platform&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;confluent platform分两个版本&lt;code class=&quot;highlighter-rouge&quot;&gt;Confluent Enterprise&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Confluent Open Source&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Confluent Enterprise&lt;/code&gt;拥有更多的组件，这里测试选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Confluent Enterprise&lt;/code&gt;启动，因为它里面包含了&lt;code class=&quot;highlighter-rouge&quot;&gt;Control Center&lt;/code&gt;方便我们测试，直观的从浏览器上看到数据信息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;启动 (特别说明我们的命令执行目录都是在confluent目录下，如我的目录&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/mo/runtime/confluent-5.0.0.2&lt;/code&gt;)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ./bin/confluent start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;看到如下信息，说明我们的confluent platform中的多个组件都启动成功。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Starting zookeeper
  zookeeper is [UP]
  Starting kafka
  kafka is [UP]
  Starting schema-registry
  schema-registry is [UP]
  Starting kafka-rest
  kafka-rest is [UP]
  Starting connect
  connect is [UP]
  Starting ksql-server
  ksql-server is [UP]
  Starting control-center
  control-center is [UP]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;访问测试
  通过使用&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:9021&lt;/code&gt;来访问&lt;code class=&quot;highlighter-rouge&quot;&gt;Control Center&lt;/code&gt;,如图。
  &lt;img src=&quot;https://github.com/moxingwang/kafka/blob/master/resource/confluent-platform-control-center.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;自定义启动&quot;&gt;自定义启动&lt;/h4&gt;

&lt;p&gt;这里我们使用两台机器模拟集群&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.226.184&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.226.27&lt;/code&gt;,’192.168.226.189’分别编排为&lt;code class=&quot;highlighter-rouge&quot;&gt;host1&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;host2&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;host3&lt;/code&gt;。修改三台机器对应的hosts文件。分别添加如下配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.0.0.0 localhost  host1
192.168.226.184 localhost  host2
192.168.226.189  localhost host3

192.168.226.27  localhost host1
0.0.0.0   localhost  host2
192.168.226.189  localhost  host3

192.168.226.27  localhost  host1
192.168.226.189  localhost   host2
0.0.0.0  localhost  host3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;分别为每台机器创建&lt;code class=&quot;highlighter-rouge&quot;&gt;myid&lt;/code&gt;文件,没个myid保存要给唯一的数字即可，我这里三个host分别指定为1，2，3。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mkdir /var/lib/zookeeper
sudo vi /var/lib/zookeeper/myid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每台机器分别指定如下配置&lt;/p&gt;

&lt;h6 id=&quot;zookeeper配置和启动&quot;&gt;zookeeper配置和启动&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vi etc/kafka/zookeeper.properties&lt;/code&gt;添加如下配置&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  tickTime=2000
  dataDir=/var/lib/zookeeper/
  clientPort=2181
  initLimit=5
  syncLimit=2
  server.1=host1:2888:3888
  server.2=host2:2888:3888
  server.3=host3:2888:3888
  autopurge.snapRetainCount=3
  autopurge.purgeInterval=24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ./bin/zookeeper-server-start etc/kafka/zookeeper.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;kafka配置和启动&quot;&gt;kafka配置和启动&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;修改配置&lt;code class=&quot;highlighter-rouge&quot;&gt;vi etc/kafka/server.properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zookeeper.connect=host1:2181,host2:2181,host3:2181

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;设置&lt;code class=&quot;highlighter-rouge&quot;&gt;broker.id=0&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;这里我们可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;broker.id.generation.enable=true&lt;/code&gt;自动生成替代。&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#broker.id=0
broker.id.generation.enable=true
advertised.listeners=PLAINTEXT://本机IP:9092
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/kafka-server-start  etc/kafka/server.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;schema-registry配置和启动可选&quot;&gt;Schema Registry配置和启动(可选)&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;配置&lt;code class=&quot;highlighter-rouge&quot;&gt;vi etc/schema-registry/schema-registry.properties&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;kafkastore.connection.url=host1:2181,host2:2181,host3:2181&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/schema-registry-start etc/schema-registry/schema-registry.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;kafka-connect配置和启动&quot;&gt;kafka connect配置和启动&lt;/h6&gt;
&lt;p&gt;这里我们不使用官方模式的&lt;code class=&quot;highlighter-rouge&quot;&gt;avro&lt;/code&gt;序列化方式，所有不启动组件&lt;code class=&quot;highlighter-rouge&quot;&gt;schema-registry&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;配置
  cp etc/schema-registry/connect-avro-distributed.properties  etc/schema-registry/connect-distributed.properties&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;vi  etc/schema-registry/connect-distributed.properties&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;bootstrap.servers=host1:9092,host2:9092,host3:9092&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	key.converter=org.apache.kafka.connect.json.JsonConverter
	#key.converter.schema.registry.url=http://192.168.226.184:8081
	value.converter=org.apache.kafka.connect.json.JsonConverter
	#value.converter.schema.registry.url=http://192.168.226.184:8081
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;启动
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/connect-distributed etc/schema-registry/connect-distributed.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;control-center配置和启动&quot;&gt;Control Center配置和启动&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;配置&lt;code class=&quot;highlighter-rouge&quot;&gt;vi etc/confluent-control-center/control-center-dev.properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	bootstrap.servers=host1:9092,host2:9092,host3:9092
	zookeeper.connect=host1:2181,host2:2181:host3:2181
	#confluent.controlcenter.schema.registry.url=http://host1:8081,http://host2:8081,http://host3:8081
	confluent.controlcenter.connect.cluster=http://192.168.222.54:8083
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;启动
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/control-center-start etc/confluent-control-center/control-center-dev.properties 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;到此为止kafka connect集群搭建成功。&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">official Confluent Platform Quick Start ; Manual Install using ZIP and TAR Archives</summary></entry><entry><title type="html">Docker方式启动Connect Debezium</title><link href="http://localhost:4000/2016/12/13/Docker%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8Connect-Debezium.html" rel="alternate" type="text/html" title="Docker方式启动Connect Debezium" /><published>2016-12-13T00:00:00+08:00</published><updated>2016-12-13T00:00:00+08:00</updated><id>http://localhost:4000/2016/12/13/Docker%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8Connect%20Debezium</id><content type="html" xml:base="http://localhost:4000/2016/12/13/Docker%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8Connect-Debezium.html">&lt;blockquote&gt;
  &lt;p&gt;以docker的方式启动debezium。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Start Zookeeper&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   docker run -it --rm --name zookeeper -p 2181:2181 -p 2888:2888 -p 3888:3888 debezium/zookeeper:0.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start Kafka&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run -it --rm --name kafka -p 9092:9092 --link zookeeper:zookeeper debezium/kafka:0.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start a MySQL database&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw debezium/example-mysql:0.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start Kafka Connect&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run -it --rm --name connect -p 8083:8083 -e GROUP_ID=1 -e CONFIG_STORAGE_TOPIC=my_connect_configs -e OFFSET_STORAGE_TOPIC=my_connect_offsets --link zookeeper:zookeeper --link kafka:kafka --link mysql:mysql debezium/connect:0.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect the MySQL database&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  curl -i -X POST -H &quot;Accept:application/json&quot; -H &quot;Content-Type:application/json&quot; localhost:8083/connectors/ -d '{ &quot;name&quot;: &quot;inventory-connector&quot;, &quot;config&quot;: { &quot;connector.class&quot;: &quot;io.debezium.connector.mysql.MySqlConnector&quot;, &quot;tasks.max&quot;: &quot;1&quot;, &quot;database.hostname&quot;: &quot;mysql&quot;, &quot;database.port&quot;: &quot;3306&quot;, &quot;database.user&quot;: &quot;debezium&quot;, &quot;database.password&quot;: &quot;dbz&quot;, &quot;database.server.id&quot;: &quot;184054&quot;, &quot;database.server.name&quot;: &quot;dbserver1&quot;, &quot;database.whitelist&quot;: &quot;inventory&quot;, &quot;database.history.kafka.bootstrap.servers&quot;: &quot;kafka:9092&quot;, &quot;database.history.kafka.topic&quot;: &quot;dbhistory.inventory&quot; } }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Monitor the MySQL database&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  docker run -it --name watcher --rm --link zookeeper:zookeeper debezium/kafka:0.8 watch-topic -a -k dbserver1.inventory.customers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>BY</name></author><category term="kafka" /><category term="debezium" /><summary type="html">以docker的方式启动debezium。</summary></entry></feed>